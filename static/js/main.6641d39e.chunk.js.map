{"version":3,"sources":["components/Navbar/Navbar.js","components/Header/Header.js","components/Item/Item.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","messageClass","message","score","topscore","Header","Item","_ref","name","image","onClick","src","alt","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","topScore","maxScore","birds","shuffle","array","tempValue","randomIndex","currentIndex","length","Math","floor","random","handleCorrectSelection","setState","handleResetWin","currentBirds","map","bird","objectSpread","isClicked","handleIncorrectSelection","handleShuffleBirds","resetNeeded","handleRenderBirds","console","log","components_Item_Item","key","id","bind","assertThisInitialized","components_Navbar_Navbar","components_Header_Header","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6641d39e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Navbar.css\";\r\n\r\nconst Navbar = (props) => (\r\n    <nav className=\"navbar\">\r\n        <ul>\r\n            <li className=\"brand\">\r\n                <a href=\"/\">Click Game</a>\r\n            </li>\r\n            <li className={props.messageClass}>{props.message}</li>\r\n            <li>Score: {props.score} | Top Score: {props.topscore}</li>\r\n        </ul>\r\n    </nav>\r\n);\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = () => (\r\n    <header className=\"header\">\r\n        <h1>Clicky Game</h1>\r\n        <h2>Click on each image once, and ONLY once</h2>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./Item.css\";\r\n\r\nconst Item = ({ name, image, onClick }) =>\r\n    <img\r\n        className=\"click-item\"\r\n        src={image}\r\n        alt={name}\r\n        name={name}\r\n        onClick={() => onClick(name)}\r\n    />;\r\n\r\nexport default Item;","import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport Header from './components/Header';\nimport Item from './components/Item';\nimport birds from './birds.json';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.handleShuffleBirds = this.handleShuffleBirds.bind(this)\n  };\n\n  state = {\n    score: 0,\n    topScore: 0,\n    maxScore: 12,\n    message: \"Click on a bird to begin\",\n    messageClass: \"\",\n    birds: birds\n  };\n\n  shuffle = (array) => {\n    let currentIndex = array.length;\n    let tempValue;\n    let randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      tempValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = tempValue;\n    }\n    return array;\n  };\n\n  handleCorrectSelection = () => {\n    if (this.state.score + 1 > this.state.topScore) {\n      this.setState({topScore: this.state.topScore + 1})\n    }\n    if (this.state.score + 1 === this.state.maxScore) {\n      this.setState({score: this.state.score + 1, message: \"Congratulations! You clicked all the birds!\", messageClass: \"correct\"})\n    } else {\n      this.setState({score: this.state.score + 1, message: \"Correct!\", messageClass: \"correct\"})\n    }\n  };\n\n  handleResetWin = (currentBirds) => {\n    if (this.state.score + 1 === this.state.maxScore) {\n      this.setState({score: 0, topScore: 0})\n\n      const updatedBirds = currentBirds.map(bird => (true) ? { ...bird, isClicked: false } : bird)\n      return updatedBirds\n    } else {\n      return currentBirds\n    }\n  };\n\n  handleIncorrectSelection = () => {\n    this.setState({score: 0, message: \"Incorrect!\"})\n\n    const updatedBirds = this.state.birds.map(bird => bird.isClicked === true ? { ...bird, isClicked: false } : bird)\n    return updatedBirds\n  };\n\n  handleShuffleBirds = (name) => {\n    var resetNeeded = false;\n    const birds = this.state.birds.map(bird => {\n      if (bird.name === name) {\n        if (bird.isClicked === false) {\n          this.handleCorrectSelection()\n          return { ...bird, isClicked: true }\n        } else {\n          resetNeeded = true\n          return { ...bird, isClicked: false }\n        }\n      }\n      return bird\n    });\n\n    if (resetNeeded) {\n      this.setState({\n        birds: this.shuffle(this.handleIncorrectSelection()),\n        messageClass: \"incorrect\"\n      })\n    } else {\n      this.setState({ birds: this.shuffle(this.handleResetWin(birds))\n      })\n    }\n  ;}\n\n  handleRenderBirds = () => {\n    console.log(this.state.birds)\n    return this.state.birds.map( (bird) =>\n    <Item\n      image={bird.image}\n      name={bird.name}\n      key={bird.id}\n      onClick={this.handleShuffleBirds}\n      />\n      );\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar\n          score={this.state.score}\n          topscore={this.state.topScore}\n          message={this.state.message}\n          messageClass={this.state.messageClass}\n          />\n          <Header />\n          <div className=\"content\">\n            {this.handleRenderBirds()}\n          </div>\n      </div>\n    );\n  };\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}